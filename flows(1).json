[
    {
        "id": "da74ad7843a0c006",
        "type": "tab",
        "label": "Flux 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "07266a52eb998812",
        "type": "function",
        "z": "da74ad7843a0c006",
        "name": "Seuils email",
        "func": "// Récupère la chaîne de caractères du message d'entrée\nlet data = msg.payload;\nlet seuil1 = msg.topic;\nlet seuil2 = msg.topic;\n\n// Initialise les seuils\nconst seuilPap = 500;\nconst seuilPac = 500;\n\n// Fonction pour détecter les dépassements de seuil\nfunction detectDepassement(label, valeur, seuil) {\n    if (valeur > seuil) {\n        let depassement = valeur - seuil;\n        return `${label} est supérieur de ${depassement}W au seuil (${valeur}W > ${seuil}W)`;\n    }\n    return null;\n}\n\n// Extraire les valeurs avec des expressions régulières\nlet matchPap = data.match(/Pap(\\d+)/);\nlet matchPac = data.match(/Pac(\\d+)/);\n\n// Vérifie si les valeurs Pap et Pac existent\nif (matchPap && matchPac) {\n    let Pap = parseInt(matchPap[1], 10); // Convertit la valeur de Pap en entier\n    let Pac = parseInt(matchPac[1], 10); // Convertit la valeur de Pac en entier\n\n    // Liste pour stocker les messages de dépassement\n    let depassements = [];\n\n    // Vérifie les dépassements pour chaque seuil\n    let depPap = detectDepassement(\"Puissance apparente\", Pap, seuilPap);\n    let depPac = detectDepassement(\"Puissance active\", Pac, seuilPac);\n\n    // Ajoute les dépassements détectés à la liste\n    if (depPap) depassements.push(depPap);\n    if (depPac) depassements.push(depPac);\n\n    // Si des dépassements ont été détectés, retourne le message\n    if (depassements.length > 0) {\n        msg.payload = `<strong><u>Attention, les seuils sont dépassés :</u></strong><br>` +\n            `<strong><u>Valeurs :</u></strong><br>Pap = ${Pap} W<br>Pac = ${Pac} W<br><br>` +\n            `<strong><u>Détails des dépassements :</u></strong><br>` +\n            depassements.join(\"<br>\") +\n            `<br><br>Cordialement,`;\n\n        msg.topic = `Alerte de dépassement de seuils`; // Ajoute le topic pour signaler l'alerte\n        return msg; // Retourne le message avec l'alerte et les détails\n    }\n}\n\n// Si aucune condition n'est remplie, ne retourne rien\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 80,
        "wires": [
            [
                "bafc404d47dc21c6"
            ]
        ]
    },
    {
        "id": "2e4988cea564602f",
        "type": "function",
        "z": "da74ad7843a0c006",
        "name": "Pap",
        "func": "// Récupère la chaîne de caractères du message d'entrée\nlet data = msg.payload;\n\n// Recherche la valeur après \"Pap\" avec une expression régulière\nlet matchPap = data.match(/Pap(\\d+)/);\n\n// Si trouvé, renvoie la valeur\nif (matchPap) {\n    msg.payload = parseInt(matchPap[1], 10); // Convertit en entier\n    return msg; // Retourne le message avec la valeur\n}\n\n// Sinon, ne retourne rien\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 140,
        "wires": [
            [
                "5819391f9ceb5105",
                "f839c4b00374ccbb"
            ]
        ]
    },
    {
        "id": "c32f70a1c81eb7cd",
        "type": "function",
        "z": "da74ad7843a0c006",
        "name": "Pac",
        "func": "// Récupère la chaîne de caractères du message d'entrée\nlet data = msg.payload;\n\n// Recherche la valeur après \"Pap\" avec une expression régulière\nlet matchPap = data.match(/Pap(\\d+)/);\n\n// Si trouvé, renvoie la valeur\nif (matchPap) {\n    msg.payload = parseInt(matchPap[1], 10); // Convertit en entier\n    return msg; // Retourne le message avec la valeur\n}\n\n// Sinon, ne retourne rien\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 260,
        "wires": [
            [
                "acb87971404998a1",
                "4fdef443c6dbd03d"
            ]
        ]
    },
    {
        "id": "562467ec669055d9",
        "type": "debug",
        "z": "da74ad7843a0c006",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 900,
        "wires": []
    },
    {
        "id": "5819391f9ceb5105",
        "type": "ui_chart",
        "z": "da74ad7843a0c006",
        "name": "",
        "group": "f9bd694023163a55",
        "order": 4,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 670,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "f839c4b00374ccbb",
        "type": "function",
        "z": "da74ad7843a0c006",
        "name": "function 4",
        "func": "// Récupère la valeur depuis msg.payload\nlet valeur = msg.payload;\n\n// Vérifie si la valeur est supérieure à 1000\nif (valeur > 1000) {\n    // Si la valeur est supérieure à 1000, on renvoie true\n    return { payload: true };\n}\n\n// Sinon, ne rien renvoyer\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "acb87971404998a1",
        "type": "function",
        "z": "da74ad7843a0c006",
        "name": "function 5",
        "func": "// Récupère la valeur depuis msg.payload\nlet valeur = msg.payload;\n\n// Vérifie si la valeur est supérieure à 1000\nif (valeur > 500) {\n    // Si la valeur est supérieure à 1000, on renvoie true\n    return { payload: true };\n}\n\n// Sinon, ne rien renvoyer\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "d458f5f1455ff704",
        "type": "function",
        "z": "da74ad7843a0c006",
        "name": "Heure",
        "func": "// Récupère la chaîne de caractères du message d'entrée\nlet data = msg.payload;\n\n// Recherche le format de l'heure après \"Time\" avec une expression régulière\nlet matchTime = data.match(/Heure(\\d{2}:\\d{2}:\\d{2})/);\n\n// Si trouvé, renvoie l'heure complète au format HH:MM:SS\nif (matchTime) {\n    msg.payload = matchTime[1]; // Extrait l'heure correspondante\n    return msg; // Retourne le message avec l'heure\n}\n\n// Sinon, ne retourne rien\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 560,
        "wires": [
            [
                "a961196c1d209a7e",
                "54a50ad142d950a2"
            ]
        ]
    },
    {
        "id": "99d25383b058245a",
        "type": "function",
        "z": "da74ad7843a0c006",
        "name": "vrms",
        "func": "// Récupère la chaîne de caractères du message d'entrée\nlet data = msg.payload;\n\n// Recherche la valeur après \"Vrms\" avec une expression régulière\nlet matchVrms = data.match(/Vrms([-\\d.]+)/);\n\n// Si trouvé, renvoie la valeur\nif (matchVrms>110 && matchVrms<245) {\n    msg.payload = \"Vrms = \" + parseFloat(matchVrms[1]) + \" (3,84 k=2) V\"; // Convertit en nombre flottant\n    return msg; // Retourne le message avec la valeur\n} else{\n    msg.payload = \"Tension en dehors des gammes de mesures\"\n    return msg;\n}\n\n// Sinon, ne retourne rien\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 420,
        "wires": [
            [
                "966d1db6d7dd5e93"
            ]
        ]
    },
    {
        "id": "122fe66a238e0ff0",
        "type": "function",
        "z": "da74ad7843a0c006",
        "name": "Irms",
        "func": "// Récupère la chaîne de caractères du message d'entrée\nlet data = msg.payload;\n\n// Recherche la valeur après \"Irms\" avec une expression régulière\nlet matchIrms = data.match(/Irms([-\\d.]+)/);\n\n// Si trouvé, renvoie la valeur\nif (matchIrms>=0.27 && matchIrms<20) {\n    msg.payload = \"Irms = \" + parseFloat(matchIrms[1]) + \"A\"; // Convertit en nombre flottant\n    return msg; // Retourne le message avec la valeur\n}else{\n    msg.payload = \"Courant en dehors des gammes de mesures\"\n    return msg;\n}\n\n// Sinon, ne retourne rien\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 500,
        "wires": [
            [
                "3aef33584a1b5053"
            ]
        ]
    },
    {
        "id": "412725d5481287f6",
        "type": "function",
        "z": "da74ad7843a0c006",
        "name": "Hum",
        "func": "// Récupère la chaîne de caractères du message d'entrée\nlet data = msg.payload;\n\n// Recherche la valeur après \"Hum\" avec une expression régulière\nlet matchHum = data.match(/Hum([-\\d.]+)/);\n\n// Si trouvé, renvoie la valeur\nif (matchHum) {\n    msg.payload = \"Humidité = \" + parseFloat(matchHum[1]) + \"RH%\"; // Convertit en nombre flottant\n    return msg; // Retourne le message avec la valeur\n}\n\n// Sinon, ne retourne rien\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 640,
        "wires": [
            [
                "8d330136a9061371"
            ]
        ]
    },
    {
        "id": "e24372388f95c940",
        "type": "function",
        "z": "da74ad7843a0c006",
        "name": "Pression",
        "func": "// Récupère la chaîne de caractères du message d'entrée\nlet data = msg.payload;\n\n// Recherche la valeur après \"Pression\" avec une expression régulière\nlet matchPression = data.match(/Pression([-\\d.]+)/);\n\n// Si trouvé, renvoie la valeur\nif (matchPression) {\n    msg.payload = \"Pression = \" + parseFloat(matchPression[1]) + \"hPa\"; // Convertit en nombre flottant\n    return msg; // Retourne le message avec la valeur\n}\n\n// Sinon, ne retourne rien\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 780,
        "wires": [
            [
                "1a1d63189c7a6015"
            ]
        ]
    },
    {
        "id": "0e0c58fb4816fe3f",
        "type": "function",
        "z": "da74ad7843a0c006",
        "name": "Température",
        "func": "// Récupère la chaîne de caractères du message d'entrée\nlet data = msg.payload;\n\n// Recherche la valeur après \"Temp\" avec une expression régulière\nlet matchTemp = data.match(/Temp([-\\d.]+)/);\n\n// Si trouvé, renvoie la valeur\nif (matchTemp) {\n    msg.payload = \"Température = \" + parseFloat(matchTemp[1]) + \"°C\"; // Convertit en nombre flottant\n    return msg; // Retourne le message avec la valeur\n}\n\n// Sinon, ne retourne rien\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 700,
        "wires": [
            [
                "6c3e1d212587200e"
            ]
        ]
    },
    {
        "id": "966d1db6d7dd5e93",
        "type": "ui_text",
        "z": "da74ad7843a0c006",
        "group": "f9bd694023163a55",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 690,
        "y": 420,
        "wires": []
    },
    {
        "id": "3aef33584a1b5053",
        "type": "ui_text",
        "z": "da74ad7843a0c006",
        "group": "bc8cf8eff8409866",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 690,
        "y": 500,
        "wires": []
    },
    {
        "id": "a961196c1d209a7e",
        "type": "ui_text",
        "z": "da74ad7843a0c006",
        "group": "b7529c0b48ca831e",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Heure de réception de la dernière donnée :",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 810,
        "y": 540,
        "wires": []
    },
    {
        "id": "4fdef443c6dbd03d",
        "type": "ui_chart",
        "z": "da74ad7843a0c006",
        "name": "",
        "group": "bc8cf8eff8409866",
        "order": 4,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 670,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "539760d6e972e889",
        "type": "function",
        "z": "da74ad7843a0c006",
        "name": "function 6",
        "func": "// Déclarez les constantes A et B\nconst A = 0.4142; // Remplacez par la valeur souhaitée\nconst B = 0.0803; // Remplacez par la valeur souhaitée\n\n// Récupère la chaîne de caractères du message d'entrée\nlet data = msg.payload;\n\n// Recherche la valeur après \"Pap\" avec une expression régulière\nlet matchPap = data.match(/Pap(\\d+)/);\n\n// Recherche les valeurs de Vrms et Irms avec des expressions régulières\nlet matchVrms = data.match(/Vrms([0-9.]+)/);\nlet matchIrms = data.match(/Irms([0-9.]+)/);\n\n// Si toutes les valeurs nécessaires sont trouvées\nif (matchPap && matchVrms && matchIrms) {\n    let Pap = parseInt(matchPap[1], 10); // Convertit Pap en entier\n    let Vrms = parseFloat(matchVrms[1]); // Convertit Vrms en nombre\n    let Irms = parseFloat(matchIrms[1]); // Convertit Irms en nombre\n    \n    // Calcule Vrms * B + Irms * A\n    let calculatedValue = Vrms * B + Irms * A;\n    \n    // Construit le résultat final : Pap suivi de la parenthèse et \"W\"\n    msg.payload = Pap + \"(\" + calculatedValue.toFixed(4) + \") W\"; // 4 décimales pour le calcul\n    return msg; // Retourne le message avec le résultat\n}\n\n// Sinon, ne retourne rien\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 980,
        "wires": [
            [
                "731d62c0fe7b6466",
                "131b0d808d22a5ff",
                "9fc0ad1c0378c5d0"
            ]
        ]
    },
    {
        "id": "131b0d808d22a5ff",
        "type": "ui_text",
        "z": "da74ad7843a0c006",
        "group": "f9bd694023163a55",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Puissance apparente :",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 650,
        "y": 1000,
        "wires": []
    },
    {
        "id": "731d62c0fe7b6466",
        "type": "ui_text",
        "z": "da74ad7843a0c006",
        "group": "bc8cf8eff8409866",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Puissance active :",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 630,
        "y": 960,
        "wires": []
    },
    {
        "id": "9fc0ad1c0378c5d0",
        "type": "debug",
        "z": "da74ad7843a0c006",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 1040,
        "wires": []
    },
    {
        "id": "69b6729c30e0d9eb",
        "type": "mqtt in",
        "z": "da74ad7843a0c006",
        "name": "",
        "topic": "#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "f1cd0691c8a44058",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 520,
        "wires": [
            [
                "562467ec669055d9",
                "e24372388f95c940",
                "0e0c58fb4816fe3f",
                "412725d5481287f6",
                "d458f5f1455ff704",
                "122fe66a238e0ff0",
                "99d25383b058245a",
                "c32f70a1c81eb7cd",
                "2e4988cea564602f",
                "07266a52eb998812",
                "539760d6e972e889",
                "7e7a41fe6ae5a314"
            ]
        ]
    },
    {
        "id": "bafc404d47dc21c6",
        "type": "e-mail",
        "z": "da74ad7843a0c006",
        "server": "smtp.gmail.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": true,
        "name": "gwenael.drouet@etu.univ-amu.fr",
        "dname": "Alerte de dépassement de seuils",
        "x": 790,
        "y": 80,
        "wires": []
    },
    {
        "id": "a40771a604e31d5d",
        "type": "inject",
        "z": "da74ad7843a0c006",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Pap1000 Pac100",
        "payloadType": "str",
        "x": 220,
        "y": 360,
        "wires": [
            [
                "07266a52eb998812"
            ]
        ]
    },
    {
        "id": "931d18281d15aab9",
        "type": "function",
        "z": "da74ad7843a0c006",
        "name": "Seuils VS",
        "func": "// Récupère la nouvelle valeur du seuil depuis msg.payload (qui provient du dashboard)\nlet seuilPapModifie = msg.payload.Pap;  // La nouvelle valeur du seuil Pap\nlet seuilPacModifie = msg.payload.Pac;  // La nouvelle valeur du seuil Pac\n\n// Envoie la nouvelle valeur des seuils via MQTT\nmsg.payload = { Pap: seuilPapModifie, Pac: seuilPacModifie };  // Structure du message avec les nouveaux seuils\nmsg.topic = \"seuil/valeur\";  // Le topic MQTT où envoyer les seuils modifiés\n\n// Retourne le message pour qu'il soit envoyé au nœud mqtt out\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 20,
        "wires": [
            []
        ]
    },
    {
        "id": "91f581c61f0d7cfa",
        "type": "ui_form",
        "z": "da74ad7843a0c006",
        "name": "",
        "label": "",
        "group": "afa7464419ab9042",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Seuil Puissance apparente",
                "value": "1000",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "1000": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 230,
        "y": 60,
        "wires": [
            [
                "931d18281d15aab9",
                "07266a52eb998812"
            ]
        ]
    },
    {
        "id": "d2ae115fe364cb67",
        "type": "ui_form",
        "z": "da74ad7843a0c006",
        "name": "",
        "label": "",
        "group": "afa7464419ab9042",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Seuil puissance active",
                "value": "1000",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "1000": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 230,
        "y": 140,
        "wires": [
            [
                "931d18281d15aab9",
                "07266a52eb998812"
            ]
        ]
    },
    {
        "id": "788fe497e51b2156",
        "type": "ui_media",
        "z": "da74ad7843a0c006",
        "group": "9a9fc31476f9627c",
        "name": "",
        "width": 2,
        "height": 2,
        "order": 3,
        "category": "image capteur",
        "file": "logo_gam²IoT.png",
        "layout": "adjust",
        "showcontrols": true,
        "loop": true,
        "onstart": false,
        "scope": "local",
        "tooltip": "",
        "x": 1330,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "6a424a72e059952f",
        "type": "ui_text",
        "z": "da74ad7843a0c006",
        "group": "9a9fc31476f9627c",
        "order": 5,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Nom du client :",
        "format": "XXXX",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1360,
        "y": 160,
        "wires": []
    },
    {
        "id": "8a956be20bb8216e",
        "type": "ui_text",
        "z": "da74ad7843a0c006",
        "group": "9a9fc31476f9627c",
        "order": 7,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Référence de l'appareil :",
        "format": "XXXX",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1390,
        "y": 200,
        "wires": []
    },
    {
        "id": "8d330136a9061371",
        "type": "ui_text",
        "z": "da74ad7843a0c006",
        "group": "1345f75c9a2a95f8",
        "order": 1,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 650,
        "y": 640,
        "wires": []
    },
    {
        "id": "6c3e1d212587200e",
        "type": "ui_text",
        "z": "da74ad7843a0c006",
        "group": "9a127749d1fa4d67",
        "order": 1,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 670,
        "y": 700,
        "wires": []
    },
    {
        "id": "1a1d63189c7a6015",
        "type": "ui_text",
        "z": "da74ad7843a0c006",
        "group": "8f757cf62e535565",
        "order": 1,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 670,
        "y": 780,
        "wires": []
    },
    {
        "id": "54a50ad142d950a2",
        "type": "ui_text",
        "z": "da74ad7843a0c006",
        "group": "8f2f155f3c7e826a",
        "order": 1,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Heure de réception de la dernière donnée :",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 800,
        "y": 580,
        "wires": []
    },
    {
        "id": "7e7a41fe6ae5a314",
        "type": "file",
        "z": "da74ad7843a0c006",
        "name": "Ecrire",
        "filename": "C:\\Users\\Etudiant\\Desktop\\test.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 450,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "f9bd694023163a55",
        "type": "ui_group",
        "name": "Puissance Apparente",
        "tab": "8aa8a59b31fb9304",
        "order": 1,
        "disp": true,
        "width": "9",
        "collapse": false,
        "className": ""
    },
    {
        "id": "bc8cf8eff8409866",
        "type": "ui_group",
        "name": "Puissance active",
        "tab": "8aa8a59b31fb9304",
        "order": 2,
        "disp": true,
        "width": 9,
        "collapse": false,
        "className": ""
    },
    {
        "id": "b7529c0b48ca831e",
        "type": "ui_group",
        "name": "Heure",
        "tab": "8aa8a59b31fb9304",
        "order": 4,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "f1cd0691c8a44058",
        "type": "mqtt-broker",
        "name": "",
        "broker": "147.94.219.13",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "afa7464419ab9042",
        "type": "ui_group",
        "name": "Seuil alerte",
        "tab": "8aa8a59b31fb9304",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9a9fc31476f9627c",
        "type": "ui_group",
        "name": "BIENVENUE",
        "tab": "d7bb906fddd23579",
        "order": 1,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "1345f75c9a2a95f8",
        "type": "ui_group",
        "name": "Humidité",
        "tab": "ec331c7506ebc04e",
        "order": 1,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "9a127749d1fa4d67",
        "type": "ui_group",
        "name": "Température",
        "tab": "ec331c7506ebc04e",
        "order": 2,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "8f757cf62e535565",
        "type": "ui_group",
        "name": "Pression",
        "tab": "ec331c7506ebc04e",
        "order": 3,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "8f2f155f3c7e826a",
        "type": "ui_group",
        "name": "Heure",
        "tab": "ec331c7506ebc04e",
        "order": 4,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "8aa8a59b31fb9304",
        "type": "ui_tab",
        "name": "Puissance",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d7bb906fddd23579",
        "type": "ui_tab",
        "name": "Acceuil de l'interface de XXXXX",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ec331c7506ebc04e",
        "type": "ui_tab",
        "name": "Environnement",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    }
]